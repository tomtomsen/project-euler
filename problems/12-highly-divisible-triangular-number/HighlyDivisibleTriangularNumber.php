<?php

declare(strict_types=1);

namespace tomtomsen\ProjectEuler\Problems\Problem12;

use tomtomsen\ProjectEuler\Problem;

final class HighlyDivisibleTriangularNumber implements Problem
{
    public function number() : int
    {
        return 12;
    }

    public function name() : string
    {
        return 'Highly divisible triangular number';
    }

    public function description() : string
    {
        return <<<'DESCRIPTION'
            The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
            Let us list the factors of the first seven triangle numbers:
             1: 1 
             3: 1,3 
             6: 1,2,3,6
            10: 1,2,5,1015: 1,3,5,1521: 1,3,7,2128: 1,2,4,7,14,28
            We can see that 28 is the first triangle number to have over five divisors.
            What is the value of the first triangle number to have over five hundred divisors?
            DESCRIPTION;
    }

    public function run() : string
    {
        $triangleNumber = 0;

        for ($i = 1; 100000 > $i; ++$i) {
            $triangleNumber = $triangleNumber + $i;

            $factorials = $this->factorials($triangleNumber);

            if (500 < \count($factorials)) {
                break;
            }
        }

        return "{$triangleNumber}";
    }

    private function factorials(int $n) : array
    {
        $factorials = [];

        for ($i = 1; \sqrt($n) > $i; ++$i) {
            if (0 === $n % $i) {
                $factorials[] = $i;

                $div = $n / $i;

                if ($div !== $i) {
                    $factorials[] = $div;
                }
            }
        }

        return $factorials;
    }
}
