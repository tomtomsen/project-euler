<?php

declare(strict_types=1);

namespace tomtomsen\ProjectEuler\Problems\Problem44;

use tomtomsen\ProjectEuler\Problem;

final class PentagonNumbers implements Problem
{
    public function number() : int
    {
        return 44;
    }

    public function name() : string
    {
        return 'Pentagon numbers';
    }

    public function description() : string
    {
        return <<<'DESCRIPTION'
            Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
            1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
            It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
            Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
            DESCRIPTION;
    }

    public function run() : string
    {
        $max = 10000;
        $pentagonNumbers = $this->generatePentagonNumbers($max);

        $d = 0;

        for ($j = 0; $j < $max && 0 === $d; ++$j) {
            for ($k = $j + 1; $k < $max; ++$k) {
                $pj = $pentagonNumbers[$j];
                $pk = $pentagonNumbers[$k];

                if (\in_array($pk - $pj, $pentagonNumbers, true)
                    && \in_array($pk + $pj, $pentagonNumbers, true)) {
                    $d = \abs($pk - $pj);
                }
            }
        }

        return "{$d}";
    }

    private function generatePentagonNumbers(int $count) : array
    {
        $numbers = [];

        for ($i = 1; $i < $count; ++$i) {
            $numbers[] = $this->pentagonNumbers($i);
        }

        return $numbers;
    }

    private function pentagonNumbers(int $n) : int
    {
        return (int) ($n * (3 * $n - 1) * .5);
    }
}
