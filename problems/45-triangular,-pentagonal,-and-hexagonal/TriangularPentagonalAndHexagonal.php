<?php

declare(strict_types=1);

namespace tomtomsen\ProjectEuler\Problems\Problem45;

use tomtomsen\ProjectEuler\Problem;

final class TriangularPentagonalAndHexagonal implements Problem
{
    public function number() : int
    {
        return 45;
    }

    public function name() : string
    {
        return 'Triangular, pentagonal, and hexagonal';
    }

    public function description() : string
    {
        return <<<'DESCRIPTION'
            Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
            Triangle
             
            Tn=n(n+1)/2
             
            1, 3, 6, 10, 15, ...
            Pentagonal
             
            Pn=n(3n−1)/2
             
            1, 5, 12, 22, 35, ...
            Hexagonal
             
            Hn=n(2n−1)
             
            1, 6, 15, 28, 45, ...
            It can be verified that T285 = P165 = H143 = 40755.
            Find the next triangle number that is also pentagonal and hexagonal.
            DESCRIPTION;
    }

    public function run() : string
    {
        $ti = 286;
        $t = $this->triangle($ti);
        $pi = 165;
        $p = $this->pentagonal($pi);
        $hi = 143;
        $h = $this->hexagonal($hi);

        while (!($t === $p && $p === $h && $h === $t)) {
            if ($t < $p && $t <= $h || $t <= $p && $t < $h) {
                $t = $this->triangle($ti++);
            } elseif ($p < $t && $p <= $h || $p <= $t && $p < $h) {
                $p = $this->pentagonal($pi++);
            } elseif ($h < $t && $h <= $p || $h <= $t && $h < $p) {
                $h = $this->hexagonal($hi++);
            } else {
                throw new \RuntimeException('unhandled case');
            }
        }

        return "{$t}";
    }

    private function triangle(int $n) : int
    {
        return (int) (.5 * $n * ($n + 1));
    }

    private function pentagonal(int $n) : int
    {
        return (int) (.5 * $n * (3 * $n - 1));
    }

    private function hexagonal(int $n) : int
    {
        return $n * (2 * $n - 1);
    }
}
